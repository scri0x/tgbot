from cgitb import text
import logging
from operator import contains
from re import IGNORECASE
from tracemalloc import stop
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from os import getenv
from sys import exit
import db_request as db
import datetime

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot_token = "5322427961:AAElTOBaFWlfxonWpzYRIO7TZK-JhtNuU0s"
#if not bot_token:
#    exit("Error: no token provided")
bot = Bot(token=bot_token)
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)


# Physic
@dp.message_handler(lambda message: '—Ñ–∏–∑' in message.text.lower() and '-' not in message.text.lower())
async def cmd_phys(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–§–∏–∑–∏–∫–∞", callback_data='phys_math'),
        types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞-–•–∏–º–∏—è", callback_data='phys_chem'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# Math
@dp.message_handler(lambda message: '–º–∞—Ç' in message.text.lower() and '-' not in message.text.lower())
async def cmd_math(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–§–∏–∑–∏–∫–∞", callback_data='phys_math'),
        types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data='math_geo'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# Biology
@dp.message_handler(lambda message: '–±–∏–æ' in message.text.lower())
async def cmd_bio(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ë–∏–æ–ª–æ–≥–∏—è-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data='bio_geo'),
        types.InlineKeyboardButton(text="–•–∏–º–∏—è-–ë–∏–æ–ª–æ–≥–∏—è", callback_data='chem_bio'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# Chemistry
@dp.message_handler(lambda message: '—Ö–∏–º' in message.text.lower())
async def cmd_chem(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞-–•–∏–º–∏—è", callback_data='phys_chem'),
        types.InlineKeyboardButton(text="–•–∏–º–∏—è-–ë–∏–æ–ª–æ–≥–∏—è", callback_data='chem_bio'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# Geography
@dp.message_handler(lambda message: '–≥–µ–æ' in message.text.lower())
async def cmd_geo(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ë–∏–æ–ª–æ–≥–∏—è-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data='bio_geo'),
        types.InlineKeyboardButton(text="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è", callback_data='geo_hist'),
        types.InlineKeyboardButton(text="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data='geo_eng'),
        types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data='math_geo'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# History
@dp.message_handler(lambda message: '–∏—Å—Ç–æ—Ä' in message.text.lower())
async def cmd_history(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è", callback_data='geo_hist'),
        types.InlineKeyboardButton(text="–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è-–ß–µ–ª–æ–≤–µ–∫.–û–±—â–µ—Å—Ç–≤–æ.–ü—Ä–∞–≤–æ",
                                   callback_data='hist_hsl'),

    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# RusLang
@dp.message_handler(lambda message: '—Ä—É—Å—Å' in message.text.lower())
async def cmd_rus_lang(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫-–†—É—Å—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data='rulang_rulit'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# KZLang
@dp.message_handler(lambda message: '–∫–∞–∑–∞—Ö' in message.text.lower())
async def cmd_kz_lang(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ö–∞–∑–∞—Ö—Å–∫–∏–π –Ø–∑—ã–∫-–ö–∞–∑–∞—Ö—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data='kzlang_kzlit'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# HSL
@dp.message_handler(lambda message: '—á–µ–ª–æ–≤–µ–∫' in message.text.lower() or '—á–æ–ø' in message.text.lower())
async def cmd_hsl(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è-–ß–µ–ª–æ–≤–µ–∫.–û–±—â–µ—Å—Ç–≤–æ.–ü—Ä–∞–≤–æ",
                                   callback_data='hist_hsl'),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=keyboard)


# Payment
@dp.message_handler(Text(contains="–ø–ª–∞—Ç–∞", ignore_case=True))
async def cmd_menu_items(message: types.Message):
    await message.answer('<b>–ë–∏–æ–ª–æ–≥–∏—è-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b>\n "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è" - 443.400 —Ç–≥ –≤ –≥–æ–¥\n "',
                         parse_mode='html')


# Magistracy
@dp.message_handler(Text(contains="–º–∞–≥–∏—Å—Ç—Ä", ignore_case=True))
async def cmd_menu_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ["first", "second", "third", "chetvertyii",
               "pyatyi", "shestoi", "üîÑ–ù–∞–∑–∞–¥üîÑ"]
    keyboard.add(*buttons)
    await message.answer("üë®üèª‚Äçüéì–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ãüë®üèª‚Äçüéì", reply_markup=keyboard)


# Doctoral
@dp.message_handler(Text(contains="–¥–æ–∫—Ç–æ—Ä", ignore_case=True))
async def cmd_menu_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ["first1", "second2", "third3", "chetvertyii4",
               "pyatyi5", "shestoi6", "üîÑ–ù–∞–∑–∞–¥üîÑ"]
    keyboard.add(*buttons)
    await message.answer("üë®‚Äçüî¨–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä—ãüë®‚Äçüî¨", reply_markup=keyboard)


# GrantsAndDiscount
@dp.message_handler(Text(contains="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥—Ä–∞–Ω—Ç—ã –∏ —Å–∫–∏–¥–∫–∏", ignore_case=True))
async def cmd_menu_items(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="100%", callback_data='100'),
        types.InlineKeyboardButton(text="50%", callback_data='50'),
        types.InlineKeyboardButton(text="25%", callback_data='25'),
        types.InlineKeyboardButton(text="20%", callback_data='20'),
        types.InlineKeyboardButton(text="10%", callback_data='10'),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–¥–∫—É", reply_markup=keyboard)


@dp.message_handler(commands="menu")
async def cmd_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ["üìö–ü—Ä–µ–¥–º–µ—Ç—ãüìö", "üí∞–û–ø–ª–∞—Ç–∞üí∞", "‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì", "üìã–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥—Ä–∞–Ω—Ç—ã –∏ —Å–∫–∏–¥–∫–∏üìã",
               "üè¢–ö–æ–ª–ª–µ–¥–∂ –ï–ù–¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏üè¢", "üë®üèª‚Äçüéì–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ãüë®üèª‚Äçüéì",
               "üë®‚Äçüî¨–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä—ãüë®‚Äçüî¨"]
    keyboard.add(*buttons)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ö–æ—Ä–∫—ã—Ç –ê—Ç–∞ –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüôã‚Äç‚ôÇÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=keyboard)


# Ask a Question
@dp.message_handler(Text(contains="–≤–æ–ø—Ä–æ—Å", ignore_case=True))
async def cmd_ask_ques(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ WhatsApp", callback_data='100',
                                   url='http://wa.me/+77029224458'),
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons)
    await message.answer("<a href='http://wa.me/+77029224458'><b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ WhatsApp</b></a>", parse_mode='html',
                         reply_markup=keyboard)


@dp.message_handler(Text(contains="–ø—Ä–µ–¥–º–µ—Ç—ã", ignore_case=True))
async def cmd_menu_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, )
    buttons = ["–ë–∏–æ–ª–æ–≥–∏—è-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
               "–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è-–ß–µ–ª–æ–≤–µ–∫.–û–±—â–µ—Å—Ç–≤–æ.–ü—Ä–∞–≤–æ", "–ö–∞–∑–∞—Ö—Å–∫–∏–π –Ø–∑—ã–∫-–ö–∞–∑–∞—Ö—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–§–∏–∑–∏–∫–∞",
               "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫-–†—É—Å—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–•–∏–º–∏—è-–ë–∏–æ–ª–æ–≥–∏—è",
               "–§–∏–∑–∏–∫–∞-–•–∏–º–∏—è", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –Ø–∑—ã–∫-–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω", "üîÑ–ù–∞–∑–∞–¥üîÑ"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã", reply_markup=keyboard)


@dp.message_handler(Text(contains="–Ω–∞–∑–∞–¥", ignore_case=True))
async def cmd_back(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ["üìö–ü—Ä–µ–¥–º–µ—Ç—ãüìö", "üí∞–û–ø–ª–∞—Ç–∞üí∞", "‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì", "üìã–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥—Ä–∞–Ω—Ç—ã –∏ —Å–∫–∏–¥–∫–∏üìã",
               "üè¢–ö–æ–ª–ª–µ–¥–∂ –ï–ù–¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏üè¢", "üë®üèª‚Äçüéì–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ãüë®üèª‚Äçüéì",
               "üë®‚Äçüî¨–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä—ãüë®‚Äçüî¨"]
    keyboard.add(*buttons)
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ö–æ—Ä–∫—ã—Ç –ê—Ç–∞ –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüôã‚Äç‚ôÇÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                         reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.split(' ')[0] in ["phys_math","phys_chem","math_geo","bio_geo","chem_bio","geo_hist","geo_eng",
"hist_hsl","rulang_rulit","kzlang_kzlit"]) #–ù–µ—Ç—É eng_hist
@dp.message_handler(lambda message: message.text in ["–ë–∏–æ–ª–æ–≥–∏—è-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
               "–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è-–ß–µ–ª–æ–≤–µ–∫.–û–±—â–µ—Å—Ç–≤–æ.–ü—Ä–∞–≤–æ", "–ö–∞–∑–∞—Ö—Å–∫–∏–π –Ø–∑—ã–∫-–ö–∞–∑–∞—Ö—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–§–∏–∑–∏–∫–∞",
               "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫-–†—É—Å—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–•–∏–º–∏—è-–ë–∏–æ–ª–æ–≥–∏—è",
               "–•–∏–º–∏—è-–§–∏–∑–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –Ø–∑—ã–∫-–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω"])
async def subject_balls(user_press): #subject : –ï—Å–ª–∏ message —Ç–æ string, –µ—Å–ª–∏ callback —Ç–æ callback_data –≤ –∞–Ω–≥–ª –≤–µ—Ä—Å–∏–∏ ; year : int
    keys = ['phys_math', 'phys_chem', 'math_geo', 'bio_geo', 'chem_bio', 'geo_hist', 'geo_eng', 'hist_hsl', 'rulang_rulit', 'kzlang_kzlit']
    values = ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è-–§–∏–∑–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è-–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–•–∏–º–∏—è-–ë–∏–æ–ª–æ–≥–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–í—Å–µ–º–∏—Ä–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è-–ß–µ–ª–æ–≤–µ–∫.–û–±—â–µ—Å—Ç–≤–æ.–ü—Ä–∞–≤–æ', '–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫-–†—É—Å—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ö–∞–∑–∞—Ö—Å–∫–∏–π –Ø–∑—ã–∫-–ö–∞–∑–∞—Ö—Å–∫–∞—è –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞']

    match(str(type(user_press))):                                       #–ü—Ä–æ–≤–µ—Ä—è–µ—Ç callback –∏–ª–∏ message
        case "<class 'aiogram.types.message.Message'>":
            subject_and_year = user_press.text.split(' ')
            otvet = user_press.answer
        case "<class 'aiogram.types.callback_query.CallbackQuery'>":
            subject_and_year = user_press.data.split(' ')
            subject_and_year[0] = values[keys.index(subject_and_year[0])]
            otvet = user_press.message.answer

    try: subject_and_year[1]                                            #–°—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –≥–æ–¥
    except IndexError:
        now = datetime.datetime.now()
        subject_and_year.insert(1, now.year - 1)

    data = db.subject_ball_from_bd(subject_and_year[0], int(subject_and_year[1]))           #–ó–∞–ø—Ä–æ—Å –Ω–∞ –±–¥

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = []
    for list_year in data[1]:
        buttons.append(types.InlineKeyboardButton(text=f"{str(list_year[0])[5:]} –≥–æ–¥", callback_data= keys[values.index(subject_and_year[0])] + ' ' + str(list_year[0])[5:]))
    keyboard.add(*buttons)
    await otvet(data[0],reply_markup=keyboard)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
